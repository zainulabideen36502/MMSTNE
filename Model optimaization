if __name__ == "__main__":
    input_size = 10  # Example input size
    hidden_size = 20
    num_layers = 2
    input_channels = 1
    output_channels = 3
    
    model = MMSTNE(input_size, hidden_size, num_layers, input_channels, output_channels)
    criterion = nn.MSELoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    
    x = torch.randn(32, 10, input_size)  # (batch_size, sequence_length, input_size)
    external_factors = torch.randn(32, 1, 10, 10, 10)  # Example dimensions for external factors
    
    outputs = model(x, external_factors)
    loss = criterion(outputs, x)  # Example loss calculation
    
    # Backward pass and optimization
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    
    print("Loss:", loss.item())

   Points to Consider:

Hyperparameters: Adjust hyperparameters (e.g., `input_size`, `hidden_size`, `num_layers`, `input_channels`, `output_channels`, learning rate) 
